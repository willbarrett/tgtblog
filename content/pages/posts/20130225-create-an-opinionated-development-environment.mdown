Date: February 25 2013
Categories: programming
Summary: We all have values with regards to development - by embedding them into a development environment, we can more easily live out our values as developers and produce higher quality code.

# Create an Opinionated Development Environment

We all have values with regards to development. Without becoming stagnant, we need to embed these values into our development environments and workflows to ensure that we keep our promises to ourselves. Your results may vary, but I believe in automated testing as a path to higher quality software.

I noticed this past week that nearly all of the bugs found by users in the applications we are creating are found in untested code. Usually, the code is fine when originally written, but when the underlying assumptions inherent in the system change (database schema changes, API updates, etc. - all common in emergent design) then the untested functionality is broken, and there is no way to know without manually testing that portion of the system. This is not a new insight - many other developers understand this. In fact, it is one of the basic justifications for writing test code in the first place.

The second thing I noticed was that many pull requests contained broken tests, or pending tests that were once implemented. I have seen developers set a failing test to pending even though they knew it revealed a deeper issue, or needed to be updated. This points to wrong thinking towards the reasons we test, and the utility of tests. Coverage on projects will slip over time if care is not taken and attention not paid. Though this should be constantly in the minds of all developers on a project, final responsibility usually falls on the lead engineer on a project. This engineer will waste time an energy putting out fires in untested code and berating junior team members for the issue, when really the issue is a process failure.

Much is written about opinionated software - encapsulating opinions about right development and process in the functionality of the system. It is an underlying tenant in the Ruby community, especially in Rails ([convention over configuration](http://www.oreillynet.com/pub/a/network/2005/08/30/ruby-rails-david-heinemeier-hansson.html?page=1), [Rails is omakase](http://david.heinemeierhansson.com/2012/rails-is-omakase.html), etc.). The focus on automated testing through TDD and BDD is also a fundamental value in the ruby community, though usually we refer to these as "best practices", or items that are suggested. Software testing is only an example though - there are many other processes that various development shops perform, which are fundamental to their concept of quality. Some view code reviews as basic, others pair programming.

I suggest that organiztions should take whatever they value with regards to quality and inject it into the basic structure of how they work. For my organization, that will soon mean mandatory 100% test coverage in our code bases, enforced by our test suite (which will fail at less than 100% coverage). We have fired up continuous integration servers for all of our projects, and the system will not allow any code into production that isn't fully tested and reviewed. The example is specific, but the idea is general. I believe that just as our software should be opinionated and drive our users towards right action, our own development environments should be opinionated and drive us as developers towards right action. While our minds are changeable and forgetful, our systems are constant. By embedding our values in our system, we can hold ourselves to a higher, but reachable, standard.
